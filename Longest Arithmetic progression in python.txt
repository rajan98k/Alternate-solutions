    # @param A : tuple of integers
    # @return an integer
    def solve(self, A):
        #With below code the time complexity will be O(N^2) at worst.
        #This is for hashing the common differences
        d={}
        if len(A)==1:
            return 1
        #return the maximum length of arithmetic progression.
        max_len=2
        for i in range(1,len(A)):
            #visited will already visited common difference in the interval [0,i-1].
            visited=set()
            #This will check each element in the range [0,i-1] if the A[i] can be part of 
            #the arithmetic progression which the jth element is the last one.
            for j in range(i):
                diff=A[i]-A[j]
                if diff in d:
                    if diff not in visited:
                        d[diff][1]=i
                        d[diff][0]+=1
                    if d[diff][0]>max_len:
                        max_len=d[diff][0]
                else:
                    d[diff]=[2,i]
                visited.add(diff)
        return max_len
